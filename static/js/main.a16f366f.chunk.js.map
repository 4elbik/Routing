{"version":3,"sources":["utilities.js","actions/index.js","reducers/index.js","components/Home/Home.jsx","components/Home/index.js","components/Login/Login.jsx","components/Login/index.js","components/Signup/Signup.jsx","components/Signup/index.js","components/App/App.jsx","components/App/index.js","serviceWorker.js","index.jsx"],"names":["formatRegisterErrorsToFormikErrors","responseErrors","errors","response","data","Object","keys","forEach","key","toString","formatLoginErrorToStr","responseError","map","loginUserRequest","createAction","loginUserSuccess","loginUserFailure","logoutUser","registerUserRequest","registerUserSuccess","registerUserFailure","userLoginFething","handleActions","actions","userRegisterFething","user","_state","payload","combineReducers","mapDispatchToProps","logout","Home","state","redirect","setRedirect","setState","renderRedirect","to","props","this","token","className","UserWrapper","username","type","onClick","React","Component","styled","div","defaultProps","connect","signin","dispatch","a","axios","post","errStr","Login","onResetForm","resetButtonRef","current","click","createRef","fieldErrorClassNames","field","touched","classNames","error","initialValues","email","password","onSubmit","values","handleReset","InputWrapper","as","Input","name","placeholder","Password","ButtonsWrapper","htmlType","disabled","aria-label","ref","register","Signup","setErrors","newErrors","MainWrapper","App","path","exact","component","Boolean","window","location","hostname","match","store","createStore","reducers","compose","applyMiddleware","ReduxThunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a16f366f.chunk.js","sourcesContent":["export const formatRegisterErrorsToFormikErrors = (responseErrors) => {\n  const errors = { ...responseErrors.response.data.errors };\n  Object.keys(errors).forEach((key) => {\n    errors[key] = errors[key].toString();\n  });\n  return errors;\n};\n\nexport const formatLoginErrorToStr = (responseError) => {\n  return Object.keys(responseError.response.data.errors).map(\n    (key) => `${key}: ${responseError.response.data.errors[key][0]}`\n  );\n};\n","import axios from 'axios';\nimport { createAction } from 'redux-actions';\nimport { formatLoginErrorToStr } from '../utilities';\n\nexport const loginUserRequest = createAction('USER_LOGIN_REQUEST');\nexport const loginUserSuccess = createAction('USER_LOGIN_SUCCESS');\nexport const loginUserFailure = createAction('USER_LOGIN_FAILURE');\n\nexport const logoutUser = createAction('USER_LOGOUT');\n\nexport const registerUserRequest = createAction('USER_REGISTER_REQUEST');\nexport const registerUserSuccess = createAction('USER_REGISTER_SUCCESS');\nexport const registerUserFailure = createAction('USER_REGISTER_FAILURE');\n\nexport const loginUser = (user) => async (dispatch) => {\n  dispatch(loginUserRequest());\n  try {\n    const url = 'http://conduit.productionready.io/api/users/login';\n    const response = await axios.post(url, { user });\n    dispatch(loginUserSuccess(response.data));\n  } catch (err) {\n    const errStr = formatLoginErrorToStr(err);\n    dispatch(loginUserFailure({ errors: errStr }));\n    throw err;\n  }\n};\n\nexport const registerUser = (user) => async (dispatch) => {\n  dispatch(registerUserRequest());\n  try {\n    const url = 'http://conduit.productionready.io/api/users';\n    await axios.post(url, { user });\n    dispatch(registerUserSuccess());\n  } catch (err) {\n    dispatch(registerUserFailure());\n    throw err;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\n\nconst userLoginFething = handleActions(\n  {\n    [actions.loginUserRequest]() {\n      return 'requested';\n    },\n    [actions.loginUserSuccess]() {\n      return 'finished';\n    },\n    [actions.loginUserFailure]() {\n      return 'failed';\n    },\n  },\n  'none'\n);\n\nconst userRegisterFething = handleActions(\n  {\n    [actions.registerUserRequest]() {\n      return 'requested';\n    },\n    [actions.registerUserSuccess]() {\n      return 'finished';\n    },\n    [actions.registerUserFailure]() {\n      return 'failed';\n    },\n  },\n  'none'\n);\n\nconst user = handleActions(\n  {\n    [actions.loginUserSuccess](_state, { payload: { user: userData } }) {\n      return userData;\n    },\n    [actions.loginUserFailure](_state, { payload: { errors } }) {\n      return { errors };\n    },\n    [actions.logoutUser]() {\n      return {};\n    },\n  },\n  {}\n);\n\nexport default combineReducers({\n  userLoginFething,\n  userRegisterFething,\n  user,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button } from 'antd';\nimport styled from 'styled-components';\nimport * as actions from '../../actions';\n\nconst mapStateToProps = (state) => {\n  const props = {\n    user: state.user,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  logout: actions.logoutUser,\n};\n\nclass Home extends React.Component {\n  state = {\n    redirect: false,\n  };\n\n  componentDidMount() {\n    const { user } = this.props;\n    if (!user.token) {\n      this.setRedirect();\n    }\n  }\n\n  componentDidUpdate() {\n    const { user } = this.props;\n    if (!user.token) {\n      this.setRedirect();\n    }\n  }\n\n  setRedirect = () => {\n    this.setState({ redirect: true });\n  };\n\n  renderRedirect = () => {\n    const { redirect } = this.state;\n    if (redirect) {\n      return <Redirect to=\"/login\" />;\n    }\n    return null;\n  };\n\n  logout = () => {\n    const { logout } = this.props;\n    logout();\n  };\n\n  render() {\n    const { user } = this.props;\n\n    return (\n      <div className=\"content\">\n        <h1>Home page</h1>\n        {this.renderRedirect()}\n        <UserWrapper>\n          <span className=\"user-name\">{user.username}</span>\n          <Button type=\"link\" onClick={this.logout}>\n            Log out\n          </Button>\n        </UserWrapper>\n        <p>\n          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Sint, aliquid velit repellendus\n          accusamus quasi consequuntur. Perspiciatis eos error natus rem laborum, reiciendis omnis,\n          maxime sapiente ducimus tempora molestias aut officia.\n        </p>\n      </div>\n    );\n  }\n}\n\nconst UserWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nHome.defaultProps = {\n  user: {},\n};\n\nHome.propTypes = {\n  user: PropTypes.instanceOf(Object),\n  logout: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import Home from './Home';\n\nexport default Home;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Input, Button } from 'antd';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport * as actions from '../../actions';\nimport 'antd/dist/antd.css';\n\nconst mapStateToProps = (state) => {\n  const props = {\n    userLoginFething: state.userLoginFething,\n    user: state.user,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  signin: actions.loginUser,\n};\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.resetButtonRef = React.createRef();\n  }\n\n  state = {\n    redirect: false,\n  };\n\n  componentDidUpdate() {\n    const { user, userLoginFething } = this.props;\n    if (userLoginFething === 'finished' && !user.errors) {\n      this.onResetForm();\n      this.setRedirect();\n    }\n  }\n\n  onResetForm = () => {\n    this.resetButtonRef.current.click();\n  };\n\n  setRedirect = () => {\n    this.setState({ redirect: true });\n  };\n\n  renderRedirect = () => {\n    const { redirect } = this.state;\n    if (redirect) {\n      return <Redirect to=\"/\" />;\n    }\n    return null;\n  };\n\n  render() {\n    const { user, userLoginFething, signin } = this.props;\n\n    const fieldErrorClassNames = (field, errors, touched) => {\n      return classNames({ error: errors[field] && touched[field] });\n    };\n\n    const initialValues = {\n      email: '',\n      password: '',\n    };\n\n    return (\n      <div className=\"content\">\n        <h1>Autorization:</h1>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={(values) => {\n            signin(values);\n          }}\n        >\n          {({ errors, touched, handleReset }) => (\n            <Form>\n              <InputWrapper>\n                <Field\n                  as={Input}\n                  className={fieldErrorClassNames('email', errors, touched)}\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                />\n              </InputWrapper>\n              <InputWrapper>\n                <Field\n                  as={Input.Password}\n                  className={fieldErrorClassNames('password', errors, touched)}\n                  name=\"password\"\n                  placeholder=\"Input your password\"\n                />\n              </InputWrapper>\n              <ButtonsWrapper>\n                <div>\n                  <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    disabled={userLoginFething === 'requested'}\n                  >\n                    Sign In\n                  </Button>\n                  {user.errors && <span className=\"error\">{user.errors}</span>}\n                </div>\n                <Button type=\"link\">\n                  <Link to=\"/signup\">Create a new user</Link>\n                </Button>\n              </ButtonsWrapper>\n              <button\n                className=\"visually-hidden\"\n                aria-label=\"Clear form inputs\"\n                type=\"button\"\n                ref={this.resetButtonRef}\n                onClick={handleReset}\n              />\n            </Form>\n          )}\n        </Formik>\n        {this.renderRedirect()}\n      </div>\n    );\n  }\n}\n\nconst InputWrapper = styled.div`\n  margin-bottom: 20px;\n`;\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n\n  & .error {\n    margin-left: 20px;\n    color: tomato;\n  }\n`;\n\nLogin.defaultProps = {\n  user: {},\n};\n\nLogin.propTypes = {\n  user: PropTypes.instanceOf(Object),\n  userLoginFething: PropTypes.string.isRequired,\n  signin: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import Login from './Login';\n\nexport default Login;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button, Input } from 'antd';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport * as actions from '../../actions';\nimport { formatRegisterErrorsToFormikErrors } from '../../utilities';\nimport 'antd/dist/antd.css';\n\nconst mapStateToProps = (state) => {\n  const props = {\n    userRegisterFething: state.userRegisterFething,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  register: actions.registerUser,\n};\n\nclass Signup extends React.Component {\n  state = {\n    redirect: false,\n  };\n\n  componentDidUpdate() {\n    const { userRegisterFething } = this.props;\n    if (userRegisterFething === 'finished') {\n      this.setRedirect();\n    }\n  }\n\n  setRedirect = () => {\n    this.setState({ redirect: true });\n  };\n\n  renderRedirect = () => {\n    const { redirect } = this.state;\n    if (redirect) {\n      return <Redirect to=\"/login\" />;\n    }\n    return null;\n  };\n\n  render() {\n    const { userRegisterFething, register } = this.props;\n\n    const fieldErrorClassNames = (field, errors, touched) => {\n      return classNames({ error: errors[field] && touched[field] });\n    };\n\n    return (\n      <div className=\"content\">\n        <h1>Register a new user account:</h1>\n        <Formik\n          initialValues={{\n            username: '',\n            email: '',\n            password: '',\n          }}\n          onSubmit={async (values, { setErrors }) => {\n            try {\n              await register(values);\n            } catch (err) {\n              const newErrors = formatRegisterErrorsToFormikErrors(err);\n              setErrors(newErrors);\n            }\n          }}\n        >\n          {({ errors, touched }) => (\n            <Form>\n              <InputWrapper>\n                <Field\n                  as={Input}\n                  className={fieldErrorClassNames('username', errors, touched)}\n                  name=\"username\"\n                  placeholder=\"Username\"\n                />\n                {errors.username && touched.username && (\n                  <span className=\"error-text\">{errors.username}</span>\n                )}\n              </InputWrapper>\n              <InputWrapper>\n                <Field\n                  as={Input}\n                  className={fieldErrorClassNames('email', errors, touched)}\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                />\n                {errors.email && touched.email && (\n                  <span className=\"error-text\">{errors.email}</span>\n                )}\n              </InputWrapper>\n              <InputWrapper>\n                <Field\n                  as={Input.Password}\n                  className={fieldErrorClassNames('password', errors, touched)}\n                  name=\"password\"\n                  placeholder=\"Input your password\"\n                />\n                {errors.password && touched.password && (\n                  <span className=\"error-text\">{errors.password}</span>\n                )}\n              </InputWrapper>\n              <ButtonsWrapper>\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  disabled={userRegisterFething === 'requested'}\n                >\n                  Sign Up\n                </Button>\n                <Button type=\"link\">\n                  <Link to=\"/login\">Login</Link>\n                </Button>\n              </ButtonsWrapper>\n            </Form>\n          )}\n        </Formik>\n        {this.renderRedirect()}\n      </div>\n    );\n  }\n}\n\nconst InputWrapper = styled.div`\n  margin-bottom: 20px;\n\n  & .error {\n    border-color: tomato;\n  }\n\n  & .error-text {\n    margin-left: 5px;\n    color: tomato;\n  }\n`;\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nSignup.propTypes = {\n  userRegisterFething: PropTypes.string.isRequired,\n  register: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);\n","import Signup from './Signup';\n\nexport default Signup;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Home from '../Home';\nimport Login from '../Login';\nimport Signup from '../Signup';\n\nconst App = () => {\n  return (\n    <MainWrapper>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n        </Switch>\n      </Router>\n    </MainWrapper>\n  );\n};\n\nconst MainWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 50px 0;\n  height: 100vh;\n  background: rgb(2, 0, 36);\n  background: linear-gradient(\n    25deg,\n    rgba(2, 0, 36, 1) 0%,\n    rgba(9, 9, 121, 1) 20%,\n    rgba(0, 212, 255, 1) 100%\n  );\n\n  & .content {\n    width: 40%;\n\n    padding: 20px;\n\n    background-color: #fff;\n    box-shadow: 0px 2px 15px rgba(0, 0, 0, 0.5);\n    border: 2px solid lightblue;\n    border-radius: 5px;\n\n    & h1 {\n      margin: 0;\n      margin-bottom: 20px;\n      font-size: 24px;\n      font-weight: 400;\n    }\n\n    & p {\n      margin: 0;\n    }\n  }\n`;\n\nexport default connect(null)(App);\n","import App from './App';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport reducers from './reducers';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n/* eslint-disable */\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(ReduxThunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n/* eslint-enable */\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <React.StrictMode> */}\n    <App />\n    {/* </React.StrictMode> */}\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}